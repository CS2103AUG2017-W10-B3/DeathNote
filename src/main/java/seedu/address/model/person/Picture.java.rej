diff a/src/main/java/seedu/address/model/person/Picture.java b/src/main/java/seedu/address/model/person/Picture.java	(rejected hunks)
@@ -14,35 +14,65 @@
 public class Picture {
 
     public static final String MESSAGE_PROFILEPICTURE_CONSTRAINTS =
-            "There should be a valid location to the picture and the picture must be a .png";
-    public static final String PICTURE_IMAGE_LOCATION = "images/"; // Where images are stored when added
+            "There should be a valid location to the picture, the picture must be a .png "
+                    + "and the size is 512KB or less";
+    public static final String MESSAGE_PROFILEPICTURE_ERROR =
+            "Error copying file.";
+
+    public static final String PICTURE_IMAGE_LOCATION =
+            "src/main/resources/images/pictures/"; // Where images are stored when added
 
     private static final String PICTURE_SUFFIX = ".png";
-    private static final String PICTURE_DELIMITER = ".png";
+    private static final String PICTURE_DELIMITER = "/";
+    private static final int PICTURE_MAX_SIZE = 512000; // 512 KB
 
     public final String value;
 
-
     public Picture(String fileLocation) throws IllegalValueException {
         String trimmedFileLocation = fileLocation == null ? null : fileLocation.trim();
         if (!isValidPicture(trimmedFileLocation)) {
             throw new IllegalValueException(MESSAGE_PROFILEPICTURE_CONSTRAINTS);
         }
 
-        String [] split = trimmedFileLocation.split(PICTURE_DELIMITER);
+        if (trimmedFileLocation != null) {
+            String[] split = trimmedFileLocation.split(PICTURE_DELIMITER);
+
+            // When we save the file, it is a single file name there is nothing to split.
+            // No need to copy it either
+
+            // last value before '/' is picture we want
+            this.value = split[split.length - 1];
+
+            // length will give 1 when it is the file we saved
+            // in that case just put PICTURE_IMAGE_LOCATION to find it
+            if (split.length != 1) {
+                File src = new File(fileLocation);
+                File dest = new File(PICTURE_IMAGE_LOCATION + this.value);
+
+                try {
+                    FileUtils.copyFile(src, dest);
+                } catch (IOException e) {
+                    throw new IllegalValueException(MESSAGE_PROFILEPICTURE_ERROR);
+                }
+            }
+        } else {
+            this.value = null;
+        }
 
-        // last value before / is picture we want
-        this.value = split[split.length - 1];
     }
 
     /**
-     * Checks if the picture exists and ends with a .png
-     * @param fileLocation location of file
-     * @return true if picture is valid
+     * Returns true if file location of picture is valid and the picture exist
+     * @param fileLocation
+     * @return
      */
-    public boolean isValidPicture(String fileLocation) {
+    public static boolean isValidPicture(String fileLocation) {
+        if (fileLocation == null) {
+            return true;
+        }
+
         File file = new File(fileLocation);
-        if (file.exists() && fileLocation.endsWith(PICTURE_SUFFIX)) {
+        if (file.exists() && file.length() <= PICTURE_MAX_SIZE && fileLocation.endsWith(PICTURE_SUFFIX)) {
             return true;
         } else {
             return false;
